services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: secure-statements-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-secure_statements}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password123}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - secure-statements-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: secure-statements-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"  # MinIO API
      - "${MINIO_CONSOLE_PORT:-9001}:9001"  # MinIO Console
    volumes:
      - minio_data:/data
    networks:
      - secure-statements-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Client for bucket creation
  minio-setup:
    image: minio/mc:latest
    container_name: secure-statements-minio-setup
    depends_on:
      - minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      STORAGE_BUCKET_NAME: ${STORAGE_BUCKET_NAME:-statements}
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD;
      /usr/bin/mc mb myminio/$$STORAGE_BUCKET_NAME;
      /usr/bin/mc mb myminio/temp;
      /usr/bin/mc mb myminio/processed;
      /usr/bin/mc mb myminio/archived;
      /usr/bin/mc policy set public myminio/$$STORAGE_BUCKET_NAME;
      exit 0;
      "
    networks:
      - secure-statements-network

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: secure-statements-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3000}:3000"
    env_file:
      - .env.docker
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - secure-statements-network
    volumes:
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3 

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local

networks:
  secure-statements-network:
    driver: bridge